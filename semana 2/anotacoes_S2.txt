Dados complexos:
    tipos complexos
    listas:
        declaradas usando colchetes[]
        aceitam tipos diferentes: Strings, char implicito, inteiro, ponto flutuante, booleano, etc.
        são mutáveis: podemos tirar e adicionar um elemento durante a execuçào do programa
        slice operator: metodos em que podemos ver os itens da lista pelos indices, se queremos ver o primeiro o ultimo o segundo, se queremos ver uma parte ou tudo etc.
        metodos proprios das listas em python
        for "inline" for em uma unica linha.
        seus elementos são separados por virgula ( , )

        podemos colocar quantos valores quisermos dentro da lista.
        para localizar um item, será pelo indice: colocamos a variavel da lista, e colocando em colchetes o indice da lista.
        
        podemos colocar apenas um item, podera colocar apenas um indice na busca
            se quiser procurar na lista mais de um valor, se pode colocar (variavel)[2:5] {o primeiro valor e aonde ira começar a procurar na lista e o outro e aonde ira parar de procurar o indice na lista, lembrando que se colocar um indice no final do colchete e nào tiver esse item na lista ira dar erro}
            se quiser procurar na lista, do primeiro valor ate o ultimo vc pode colcoar(variavel)[:] {os 2 vazios pois não ira começar do indice 0 até final da lista}
            assim tbm existe, [:2] ira começar do primeiro indice até o 3 indice.
            [2:] ira começar do 3 indice da lista até o final

            tambem existe o [::-1] ira pegar do inicio da lista até o final so que pegara de um em 1 pelo valor mas do ultimo elemento até o primeiro pelo sinal negativo(-)
                ira pegar a lista de tras pra frente em 1 em 1
                existe [::-2] ira começar a ler do inicio da lista até o final ao contrario em 2 em 2 valores quero dizer do final da lista ao inicio em 2 e 2 valores.
                existe tbm [::2] e o mesmo do outro mas dessa vez ira ser do inicio da lista até o final em 2 valores.


                existe os undermetods= que são metodos com 2 undenscorrs ( __ )
     



        metodos:
            .append()= para adicionar item ao final da lista.
            .clar()= ira apagar os itens da lista
            .copy()= ira copiar os itens da lista, tambem podemos usar: (variavel)[::] com os trechos da lista que tambem funciona como copia da lista, e nesse caso pode colocar o incio e o termino da copia.
            .count()= retorna o numero de vezes em que o elemento especificado esta na lista.
            .extend()= extend as lista juntando elas.
            .index()= colocar o mesmo valor da lista como numero ou nome, e retorna o indice dele
            .insert()= pega indice valor, de onde vc quer colocar algo dentro da lista
            .pop()= retira algum valor da lista conforme o indice que vc queira.
            .remove()= retira algum item da lista pelo o numero ou nome do valor.
            .reverse()= inverte os valores de tras pra frente de uma lista.
            .sort()= ele retonra mudando a posição dos valores, somente usando o . sort(): ele irá pegas os valores e colocalos em ordem alfabetica se for string ou se for numerico ira sempre começar do 0 ate o infinito ou com numeros negativos ira comçar do 0 a numero -infinitos.
                .sort(reverse = True)= mesma coisa do somento .sort() so que sera o oposto ira pegar do final do alfabeto até o começo e ira pegar o maior numero positivo até o 0 ou o maior numero negativo até 0
                .sort()

    
    Passagem por valor vs por referência:
        Passagem por valor:
            Os valores mudam sua forma, o valor da variavel continua intacto e a variavel continua intacta.
            as varaiveis vão estar intactas, mas ira entregar um novo valor, e não mudar o valor em si.
            objetos imutaveis:
                String ou str
                int ou inteiro
                tuple ou tupla
                etc...

            metodos:
                x.strip()= ele corta o espaçamento, no inicio da string se houver espaço antes de alguma letra.
                    mas se atente porque ele se funciona dentro de um função.
                    como:
                        print(x.strip()) 
                x.capitalize()= deixa todas as letras minusculas.
                    mas como no x.strip so funciona dentro de um metodo.

        passagem por referencia:
            passagem por referência muda o valor em si de uma lista,variavel, etc...
            
            Passagem por valor: o valor e copiado para dentro da função e sua variavel não sofre alterações.
                Nesse exemplo, perceba que a variável “x” não foi alterada em nenhum dos dois casos nos quais foi chamada uma função. A função strip() remove os espaços no começo e no final de uma string, mas quando eu imprimo a minha variável “x” novamente, ela continua igual; o mesmo acontece com a função capitalize(); ela transforma todas as letras para lowercase, mas a variável “x” continua intacta. Isso acontece pois a variável “x”, nesse caso, tem o seu conteúdo copiado para uma variável auxiliar, na qual as funções efetivamente são executadas. O mesmo acontece quando fazemos uma operação de soma na variável sem reatribuir o resultado dessa operação de volta para a variável “my_number”.

            Passagem por referencia: A função recebe uma referencia para a posição na memmória onde sua variavel está alocada/salva, isso significa que nessa variavel vai afetar diretamente a variavel passada para ela.
                Nesse exemplo — diferentemente do primeiro caso, quando foi executada uma função como sort() que ordena a lista — é executada diretamente na variável, e quando ela é impressa após executar o método, a própria variável “my_list” é alterada. Isso acontece pois, na chamada das duas funções acima, a variável “my_list” é passada como uma referência na memória, ou seja, em qualquer alteração que essa função faça na lista, a variável será alterada.


            objetos mutaveis:
                list ou lista
                dict ou dicionário
                set não sei oque é.

            metodos:
                .sort()
                .pop()
                .append()
                etc...        

    Tuplas:
        É um tipo de dado complexo como uma lista utilizando ordenados como uma lista de fato mas existem diferenças:
            1: uma tupla diferente de uma lista, ela não pode ser mudada, quero dizer, não se pode adicionar, retirar ou mudar seus valores, mas sim apenas substuir o valor ao todo.
            2: utilizado () em vez de []
            3: pode se criar uma variavel ex: nome: 'lucas', 'larissa', 'sileia', 'augusto'. a partir da virgula ira se cirar uma tupla, pode se criar assim tbm: nome = 'lucas', (ira se criar uma tupla) ou pode colocar entre parenteses os valores que tambem ira formar uma tupla.
                obs: quando subistuimos todos os valores, para manter o mesmo valor subistuido de uma tupla deve-se colocar a variavel e indice como no e: tuplas.py, cadastro[0] e o resto subistuir  os valores ou colocar sua variavel e indice.
                    obs2: nao precisando desempacotar a variavel mas se desempacotar colocar o indice msm assim.
            4: Quando desempacotamos os valores em variaveis, podemos colocar mais de um valor na mesma variavel
            5: Podemos pegar somente os valores que queremos e os que não queremos utilizar podemos colocar *(nome de variavel sem parentese), para salvar os valores restantes, e se não quiser salvar os valores restantes, pode colocar ( _ ) underscore, que não vai salvar e nao dar erro no codigo.
                ex: nome, _, _,*restante = cadastro
            6: mas podem carregar elementos mutaveis dentro dela como uma lista, e podemos colocar valores dentro da lista.
                cadastro = "Lucas", 33, 12121999, "Maceió", []
                    cadastro[-1].append('natasha')
                        cadastro[-1] ou cadastro[5], ou pode tambem desepacotar mudar o valor dentro da lista e empacotar novamente.
            obs: Para pegarmos valores e fazermos uma copia e uzza-los para algo usaremos a variavel[indice], para pegarmos o valor em questao para utiliza-lo como printar na tela por ex.

    Dicionario(dicts):
        É um tipo de dado complexo, diferente de uma lista e tupla e ele e utilizado para mapear um objeto a partir de uma chave e retornar um valor a partir dessa chave.
        chave---> valor
        #palavra ---> significado
        #topico ---> conteudo
        #nome ---> numero de telefone
        #cpf ----> cadastro
            1: para utilizarmos dicts usamos {chaves} como elementos enclausuradores, como nas listas são [chaves] e em tuplas (parenteses).
            2:Podemos chamar ele usando print(variavel[chave]) para imprimir um valor da chave armazenado apenas ou print(variavel) para imprimir todas as chaves valor guardadas na varaivel
            3:podemos usar variavel.get(chave) sem nenhum erro, e quando não tiver chave/valor nesse dicionario ele ira retornar novamente
                Mas vc pode colocar o valor que não estiver no dicionario, pode utilizar variavel.get(d, -1) ira retornar -1 criando no instante epenas para o momento do .get() não foi criando o dicionario d

            .get() = chama o valor com a chave
            .items() = chama a lista toda da variavel que foi guardada em tuplas cada dicionario.
                list(variavel.items()) = transforma em uma lista de tuplas.
            .keys() = vai retornar as chaves dos dicionarios.
            .values() = vai retornar os valores dos dicionarios.        

        obs: podemos ter qualquer tipo de chave e não podemos usar objetos mutaveis como uma lista, lista vazia e String vazias.
        obs2: podemos ter qualquer tipo de valor.    
        obs3: podemos ter mesmos valores dentro do mesmo codigo em um projeto mas não mesmas chaves.               