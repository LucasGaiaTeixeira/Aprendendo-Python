funções:
    uma função é uma sequencia de comandos que executa alguma tarefa. A sua principal finalidade é nos ajudar a organizar programas em pedaços que correspondam a como imaginaos a solução desse problema.
    um paralelo de uma funçào seria: uma receita
        O nome da receita seria o nome da função e o bloco de codigos os seus igredientes e o modo de preparo.

    Existem 2 tipos de funções:
        Funçòes definidas pelo usuario- como o proprio nome diz, sào definicasd pelo usuario a fazer uma tarefa especifica.
        funcões embutidas, são funções ja pré definidas no proprio python.

    Sua sintaxe:
        def soma(numeroA, numeroB):
            soma = numeroA + numeroB
            return soma
        def:
            sixtaxe para mostrar que eu uma função
        soma:
            o nome da função e o que ela ira fazer
                dar nome para a função do que ele ira fazer para não confundir ninguem, e pode dar qualquer nome exceto nomes especiais do proprio python
        (numeroA, numeroB):
            paramentos que a função vai receber de valor, tem função que vamos criar que nao precisa de nenhum valor, entao nenhum parametros ou outras def que precisa de muitos parametros, ai tem que especificar quantos vão ser ou usar ARGS OU KWARGS
                quando queremos que uma valor de parametro ja seja inserido sem que seja absolutamente necessario botar o valor quando chamar a def, podemo ja especificar o valor dela quando não temos nenhum valor a colocar, ficaria:
                    (x, expoente = 2) ja damos um valor default para ela sem sempre colcoar quando quando chamaos a def
                        mas podemos colocar quando chamaos a def sem probelmas, apenas um valor default quando não tiver 1.
                tambem podemos quando chamarmos a função podemos mudar a ordem ou colocar mais certeiro o nome do parametro = algum valor ex:
                    def soma(numA + numB):
                        return numA + numB

                    soma(numA = 10, numB = 5),podemos colocar em qualquer ordem quisermos desde que coloquemos o nome do parametro corretamente e dando valor a ele.    
        
        return:
            a função sempre tem que retornar algo mesmo que seja um print na tela.
                    

    importanto pacotes
        from = importacão do arquivo
        import = importação da classe ou função do arquivo,usando (,) para chamar mais de uma classe ou def.






funções na pratica:
    input() = para pegar palavras do proprio teclado e introduzir teclado do sistema.
    toda a função retorna alguma coisa.
    toda a função pode ter um controle de validaçào, pois, a funçào sempre retorna algo mesmo que seja implicito. ex: no arquivo do funcoes na pratica
    

    *args = nas funções se usa args para quando chamarmos a função, não termos a qauntidade de valores que queremos na função, significa que podemos colocar sem mostrar quantos valores devemos colocar na prorpia função.
        ex: no arquivo funcoes na pratica

    **KWARGS = se usa tambem como args, para quantos parametros quisermos nas funções, mas diferente do args kwargs ele usa chave argumento como um dicionario.
        ex: no arquivo funcoes na pratica.
        e tambem outra diferença do args o for vai puxar a chave em questao quando printarmos a variavle local do for, para printar o valor da chave se utiliza kwargs[variavel local do for].
        kwargs ele é normalmente usado para executar arquivos python via cmd (codigo)

Pacotes:
    Pacotes podem ser definidos como conjunto de algoritimos ou funções pré-programadas que podem ser invocadas para sua aplicação        
    para a instalação de pacotes utilizamos um sistema de gerenciamenteo de pacotes chamado PIP, existe outros mas o mais comum e o pip e devemos insireir comandos com a segunte estrutura
        pip (ação) (pacote)
        ex:
            pip isntall requests (responsavel por encaminhar requisições http para a internet)

    importanto o pacote como um todo:
        import requests

    importando funções do requests
        form requests import *

    importando ou uma mais funções especificas:
        from requests import get, post 


    tambem conseguimos importantar nossos proprios pacotes,utilizando a mesma estrutua de codigo
        from (arquivo) import (classe/função) 

    tambem podemos dar apelidos as nossas importações itulizandoo o ( as )
        ex: import requests as r
        r.get
        r.post
        r == requests
    E tambem dar nomes as funçoes da classe.
        ex: from requests import get as requests_get (so dei o nome do requests_get porque eu quis mesmo e estava no video).

